import templates from './ascii-art/templates.js'
import generateAsciiMatrix from './ascii-art/generateAsciiMatrix.js'
import GraphemeSplitter from 'grapheme-splitter'

export default (bot) => {
  const handler = async (query) => {
    const userQuery = query.query.trim()
    const me = '@' + (await bot.getMe()).username

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    if (!userQuery || userQuery.length < 2) {
      const results = Object.keys(templates).map((templateId, index) => ({
        type: 'article',
        id: String(index),
        title: `üñº ${templateId}`,
        input_message_content: {
          parse_mode: 'MarkdownV2',
          message_text: `–ò—Å–ø–æ–ª—å–∑—É–π \`${me} ${templateId} –°–õ–û–í–û\``
        },
        description: `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ASCII-–∞—Ä—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞ ${templateId}`
      }))

      return bot.answerInlineQuery(query.id, results, { cache_time: 0 })
    }

    // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —à–∞–±–ª–æ–Ω + —Å–ª–æ–≤–æ + –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ N)
    const params = userQuery.split(' ')

    // –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –º–µ–Ω—å—à–µ –¥–≤—É—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç —Å–ª–æ–≤–∞ –∏–ª–∏ —à–∞–±–ª–æ–Ω–∞), –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    if (params.length < 2) {
      return bot.answerInlineQuery(query.id, [], { cache_time: 0 })
    }

    const templateId = params[0]
    const N = params.length > 2 ? parseInt(params[params.length - 1]) : NaN
    const k = isNaN(N) ? params.length : params.length - 1
    const inputString = params.slice(1, k).join(' ')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —à–∞–±–ª–æ–Ω
    if (!templates[templateId]) {
      return bot.answerInlineQuery(query.id, [], { cache_time: 0 })
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º —ç–º–æ–¥–∑–∏
    const splitter = new GraphemeSplitter()
    const inputLength = splitter.countGraphemes(inputString)

    const size = Math.max(isNaN(N) ? Math.min(inputLength, 50) : Math.min(N, 50), 5)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –±—ã–ª–∞ –ø—É—Å—Ç–æ–π
    if (!inputString.trim()) {
      console.error('–í–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ø—É—Å—Ç–æ–µ')
      return bot.answerInlineQuery(query.id, [], { cache_time: 0 })
    }

    try {
      const svg = templates[templateId](size) // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SVG –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
      const asciiArt = await generateAsciiMatrix(svg, inputString) // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ASCII-–∞—Ä—Ç

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π
      if (!asciiArt.trim()) {
        console.error('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ASCII-–∞—Ä—Ç –ø—É—Å—Ç–æ–π')
        return bot.answerInlineQuery(query.id, [], { cache_time: 0 })
      }

      const results = [{
        type: 'article',
        id: query.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º query.id –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        title: `${templateId} —Å —Ä–∞–∑–º–µ—Ä–æ–º ${size}`,
        input_message_content: {
          message_text: `\`\`\`\n${asciiArt.replace(/[`]/g, '\\`')}\n\`\`\``, // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ Markdown
          parse_mode: 'MarkdownV2'
        },
        description: `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ${templateId} —Å —Ä–∞–∑–º–µ—Ä–æ–º ${size}`
      }]

      bot.answerInlineQuery(query.id, results)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error)
    }
  }

  return handler
}
